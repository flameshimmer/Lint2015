
#include "stdafx.h"
#include "LintSolution1.h"


using namespace std;
typedef std::numeric_limits< double > dbl;
/*================ Total question count:251, unique questions compared to LeetCode: 102 ================*/
int _tmain(int argc, _TCHAR* argv[])
{
    // Runtime begin marker start
    clock_t begin = clock();

	//LintSolution1::CompareStrings_Easy::Main();
	//LintSolution1::ContinuousSubarraySum_Medium::Main();
	//LintSolution1::ContinuousSubarraySumII_Medium::Main();
	//LintSolution1::ConvertExpressionToPolishNotation_Hard::Main();
	//LintSolution1::ConvertExpressionToReversePolishNotation_Hard::Main();
	//LintSolution1::CopyBooks_Hard::Main();
	//LintSolution1::CountOfSmallerNumber_Medium::Main();
	//LintSolution1::CountOfSmallerNumberbeforeitself_Hard::Main();
	//LintSolution1::DataStreamMedian_Hard::Main();
	//LintSolution1::DeleteDigits_Medium::Main();
	//LintSolution1::DivideTwoIntegers_Medium::Main();
	//LintSolution1::EvaluateReversePolishNotation_Medium::Main();
	//LintSolution1::ExpressionEvaluation_Hard::Main();
	//LintSolution1::ExpressionTreeBuild_Hard::Main();
	//LintSolution1::FastPower_Medium::Main();
	//LintSolution1::FindMinimumInRotatedSortedArray_Medium::Main();
	//LintSolution1::FindMinimumInRotatedSortedArrayII_Medium::Main();
	//LintSolution1::FindPeakElement_Medium::Main();
	//LintSolution1::FindPeakElementII_Hard::Main();
	//LintSolution1::FindTheConnectedComponentInTheUndirectedGraph_Easy::Main();
	//LintSolution1::FindTheWeakConnectedComponentInTheDirectedGraph_Medium::Main();
	//LintSolution1::FirstBadVersion_Medium::Main();
	//LintSolution1::FizzBuzz_Easy::Main();
	//LintSolution1::FlipBits_Easy::Main();
	//LintSolution1::HashFunction_Easy::Main();
	//LintSolution1::Heapify_Medium::Main();
	//LintSolution1::InsertNodeInABinarySearchTree_Easy::Main();
	//LintSolution1::InterleavingPositiveAndNegativeNumbers_Medium::Main();
	//LintSolution1::IntervalMinimumNumber_Medium::Main();
	//LintSolution1::IntervalSum_Medium::Main();
	//LintSolution1::IntervalSumII_Hard::Main();
	//LintSolution1::kSum_Hard::Main();
	//LintSolution1::kSumII_Medium::Main();
	//LintSolution1::KthLargestElement_Medium::Main();
	//LintSolution1::KthSmallestNumberInSortedMatrix_Medium::Main();
	//LintSolution1::LongestCommonSubsequence_Medium::Main();
	//LintSolution1::LongestCommonSubstring_Medium::Main();
	//LintSolution1::LongestConsecutiveSequence_Medium::Main();
	//LintSolution1::LongestIncreasingContinuoussubsequence_Easy::Main();
	//LintSolution1::LongestIncreasingContinuoussubsequenceII_Hard::Main();
	//LintSolution1::LongestIncreasingSubsequence_Medium::Main();
	//LintSolution1::MajorityNumberIII_Medium::Main();
	//LintSolution1::MatrixZigzagTraversal_Easy::Main();
	//LintSolution1::MaxTree_Hard::Main();
	//LintSolution1::MaximumSubarray_Easy::Main();
	//LintSolution1::MaximumSubarrayDifference_Medium::Main();
	//LintSolution1::MaximumSubarrayII_Medium::Main();
	//LintSolution1::MaximumSubarrayIII_Hard::Main();
	//LintSolution1::MergeSortedArrayII_Easy::Main();
	//LintSolution1::MinimumAdjustmentCost_Medium::Main();
	//LintSolution1::MinimumSizeSubarraySum_Medium::Main();
	//LintSolution1::MinimumSubarray_Easy::Main();
	//LintSolution1::NextPermutation_Medium::Main();
	//LintSolution1::NextPermutationII_Medium::Main();
	//LintSolution1::NumberOfAirplanesInTheSky_Medium::Main();
	//LintSolution1::NumberOfIslandsII_Hard::Main();
	//LintSolution1::NutsAndBoltsProblem_Medium::Main();
	//LintSolution1::PartitionArraybyOddAndEven_Easy::Main();
	//LintSolution1::PermutationIndex_Easy::Main();
	//LintSolution1::PermutationIndexII_Medium::Main();
	//LintSolution1::PostOfficeProblem_Hard::Main();
	//LintSolution1::PreviousPermuation_Medium::Main();
	//LintSolution1::PrintNumbersbyRecursion_Medium::Main();
	//LintSolution1::Rehashing_Medium::Main();
	//LintSolution1::RemoveNodeInBinarySearchTree_Hard::Main();
	//LintSolution1::RotateString_Easy::Main();
	//LintSolution1::RouteBetweenTwoNodesInGraph_Medium::Main();
	//LintSolution1::SearchATwoDMatrixII_Medium::Main();
	//LintSolution1::SearchRangeInBinarySearchTree_Medium::Main();
	//LintSolution1::SegmentTreeBuild_Medium::Main();
	//LintSolution1::SegmentTreeModify_Medium::Main();
	//LintSolution1::SegmentTreeQuery_Medium::Main();
	//LintSolution1::SegmentTreeQueryII_Medium::Main();
	//LintSolution1::SingleNumberIII_Medium::Main();
	//LintSolution1::Singleton_Easy::Main();
	//LintSolution1::SlidingWindowMedian_Hard::Main();
	//LintSolution1::SortColorsII_Medium::Main();
	//LintSolution1::SortLettersbyCase_Medium::Main();
	//LintSolution1::SpaceReplacement_Easy::Main();
	//LintSolution1::SubarraySum_Easy::Main();
	//LintSolution1::SubarraySumClosest_Medium::Main();
	//LintSolution1::SubarraySumII_Hard::Main();
	//LintSolution1::SubmatrixSum_Medium::Main();
	//LintSolution1::Subtree_Easy::Main();
	//LintSolution1::TheSmallestDifference_Medium::Main();
	//LintSolution1::ThreeSumClosest_Medium::Main();
	//LintSolution1::TopologicalSorting_Medium::Main();
	//LintSolution1::TrappingRainWaterII_Hard::Main();
	//LintSolution1::TriangleCount_Hard::Main();
	//LintSolution1::UglyNumber_Medium::Main();
	//LintSolution1::UpdateBits_Medium::Main();
	//LintSolution1::WoodCut_Medium::Main();


// 7/28/2015
	//LintSolution1::AssignmentOperatorOverloading(CPlusPlusOnly)_Medium::Main();
LintSolution1::APlusBProblem_Medium::Main();

//LintSolution1::Backpack_Medium::Main();
//LintSolution1::BackpackII_Medium::Main();
//LintSolution1::BinaryRepresentation_Hard::Main();
//LintSolution1::BinarySearchTreeIterator_Hard::Main();
//LintSolution1::BinaryTreeSerialization_Medium::Main();
//LintSolution1::CoinsInALine_Medium::Main();
//LintSolution1::CoinsInALineII_Medium::Main();
//LintSolution1::CoinsInALineIII_Hard::Main();

	// Runtime end marker
    clock_t end = clock();
    double elapsed_time_in_millisecond = double(end - begin) / double(CLOCKS_PER_SEC / 1000.0);

    // End program routine
    cout.precision(dbl::digits10);
    cout << "\n\nYour program total runtime is: " << elapsed_time_in_millisecond << "ms";
    cout << "\n\nPress enter key to exit ...\n\n";
    cin.get();
    return 0;
}


/*================ Duplicated questions with LeetCode: 149 ================*/
//LintSolution1::AddBinary_Easy::Main();
//LintSolution1::AddTwoNumbers_Easy::Main();
//LintSolution1::Anagrams_Medium::Main();
//LintSolution1::BalancedBinaryTree_Medium::Main();
//LintSolution1::BestTimeToBuyAndSellStock_Medium::Main();
//LintSolution1::BestTimeToBuyAndSellStockII_Medium::Main();
//LintSolution1::BestTimeToBuyAndSellStockIII_Medium::Main();
//LintSolution1::BestTimeToBuyAndSellStockIV_Hard::Main();
//LintSolution1::BinarySearch_Easy::Main();	
//LintSolution1::BinaryTreeInorderTraversal_Easy::Main();
//LintSolution1::BinaryTreeLevelOrderTraversal_Medium::Main();
//LintSolution1::BinaryTreeLevelOrderTraversalII_Medium::Main();
//LintSolution1::BinaryTreeMaximumPathSum_Medium::Main();
//LintSolution1::BinaryTreePostorderTraversal_Easy::Main();
//LintSolution1::BinaryTreePreorderTraversal_Easy::Main();
//LintSolution1::BinaryTreeZigzagLevelOrderTraversal_Medium::Main();
//LintSolution1::BuildingOutline_Hard::Main();
//LintSolution1::Candy_Hard::Main();
//LintSolution1::ClimbingStairs_Easy::Main();
//LintSolution1::CloneGraph_Medium::Main();
//LintSolution1::Combinations_Medium::Main();
//LintSolution1::CombinationSum_Medium::Main();
//LintSolution1::CombinationSumII_Medium::Main();	
//LintSolution1::ConstructBinaryTreefromInorderAndPostorderTraversal_Medium::Main();
//LintSolution1::ConstructBinaryTreefromPreorderAndInorderTraversal_Medium::Main();
//LintSolution1::ContainerWithMostWater_Medium::Main();
//LintSolution1::ConvertSortedArrayToBinarySearchTreeWithMinimalHeight_Easy::Main();
//LintSolution1::ConvertSortedListToBinarySearchTree_Medium::Main();
//LintSolution1::CopyListwithRandomPointer_Medium::Main();
//LintSolution1::CountAndSay_Easy::Main();
//LintSolution1::CountOneInBinary_Easy::Main();
//LintSolution1::DeleteNodeInTheMiddleOfSinglyLinkedList_Easy::Main();
//LintSolution1::DigitCounts_Medium::Main();
//LintSolution1::DistinctSubsequences_Medium::Main();
//LintSolution1::EditDistance_Medium::Main();
//LintSolution1::Fibonacci_Easy::Main
//LintSolution1::FindTheMissingNumber_Medium::Main();
//LintSolution1::FirstMissingPositive_Medium::Main();
//LintSolution1::FourSum_Medium::Main();
//LintSolution1::GasStation_Medium::Main();
//LintSolution1::GrayCode_Medium::Main();
//LintSolution1::HouseRobber_Medium::Main();
//LintSolution1::ImplementQueuebyTwoStacks_Medium::Main();
//LintSolution1::InsertInterval_Easy::Main();
//LintSolution1::InsertionSortList_Easy::Main();
//LintSolution1::IntegerToRoman_Medium::Main();
//LintSolution1::InterleavingString_Medium::Main();
//LintSolution1::InvertBinaryTree_Easy::Main();
//LintSolution1::JumpGame_Medium::Main();
//LintSolution1::JumpGameII_Medium::Main();
//LintSolution1::LargestNumber_Medium::Main();
//LintSolution1::LargestRectangleInHistogram_Hard::Main();
//LintSolution1::LengthOfLastWord_Easy::Main();
//LintSolution1::LinkedListCycle_Medium::Main();
//LintSolution1::LinkedListCycleII_Hard::Main();
//LintSolution1::LongestCommonPrefix_Medium::Main();
//LintSolution1::LongestPalindromicSubstring_Medium::Main();
//LintSolution1::LongestSubstringwithAtMostKDistinctCharacters_Medium::Main();
//LintSolution1::LongestSubstringWithoutRepeatingCharacters_Medium::Main();
//LintSolution1::LongestWords_Easy::Main();
//LintSolution1::LowestCommonAncestor_Medium::Main();
//LintSolution1::LRUCache_Hard::Main();
//LintSolution1::MajorityNumber_Easy::Main();
//LintSolution1::MajorityNumberII_Medium::Main();
//LintSolution1::MaximalSquare_Medium::Main();
//LintSolution1::MaximumDepthOfBinaryTree_Easy::Main();
//LintSolution1::MaximumGap_Hard::Main();
//LintSolution1::MaximumProductSubarray_Medium::Main();
//LintSolution1::MaxPointsOnALine_Medium::Main();
//LintSolution1::Median_Easy::Main();
//LintSolution1::MedianOftwoSortedArrays_Hard::Main();
//LintSolution1::MergeIntervals_Easy::Main();
//LintSolution1::MergekSortedLists_Medium::Main();
//LintSolution1::MergeSortedArray_Easy::Main();
//LintSolution1::MergeTwoSortedLists_Easy::Main();
//LintSolution1::MinimumDepthOfBinaryTree_Easy::Main();
//LintSolution1::MinimumPathSum_Easy::Main();
//LintSolution1::MinimumWindowSubstring_Medium::Main();
//LintSolution1::MinStack_Medium::Main();
//LintSolution1::N_Queens_Medium::Main();
//LintSolution1::N_QueensII_Medium::Main();
//LintSolution1::NthToLastNodeInList_Easy::Main();
//LintSolution1::NumberOfIslands_Easy::Main();
//LintSolution1::O1CheckPowerOfTwo_Easy::Main();
//LintSolution1::PalindromePartitioning_Easy::Main();
//LintSolution1::PalindromePartitioningII_Medium::Main();
//LintSolution1::PartitionArray_Medium::Main();
//LintSolution1::PartitionList_Easy::Main();
//LintSolution1::Permutations_Medium::Main();
//LintSolution1::PermutationSequence_Medium::Main();
//LintSolution1::PermutationsII_Medium::Main();
//LintSolution1::PlusOne_Easy::Main();
//LintSolution1::ProductOfArrayExcludeItself_Easy::Main();
//LintSolution1::RecoverRotatedSortedArray_Easy::Main();
//LintSolution1::RegularExpressionMatching_Hard::Main();	
//LintSolution1::RemoveDuplicatesfromSortedArray_Easy::Main();
//LintSolution1::RemoveDuplicatesfromSortedArrayII_Easy::Main();
//LintSolution1::RemoveDuplicatesfromSortedList_Easy::Main();
//LintSolution1::RemoveDuplicatesfromSortedListII_Medium::Main();
//LintSolution1::RemoveElement_Easy::Main();	
//LintSolution1::RemoveNthNodeFromEndOfList_Easy::Main();
//LintSolution1::ReorderList_Medium::Main();
//LintSolution1::ReverseInteger_Easy::Main();
//LintSolution1::ReverseLinkedList_Easy::Main();
//LintSolution1::ReverseLinkedListII_Medium::Main();
//LintSolution1::ReverseWordsInAString_Easy::Main();
//LintSolution1::RomanToInteger_Medium::Main();
//LintSolution1::RotateImage_Medium::Main();
//LintSolution1::RotateList_Medium::Main();
//LintSolution1::ScrambleString_Hard::Main();
//LintSolution1::SearchATwoDMatrix_Easy::Main();
//LintSolution1::SearchforARange_Medium::Main();
//LintSolution1::SearchInRotatedSortedArray_Medium::Main();
//LintSolution1::SearchInRotatedSortedArrayII_Medium::Main();
//LintSolution1::SearchInsertPosition_Easy::Main();
//LintSolution1::SetMatrixZeroes_Medium::Main();
//LintSolution1::SimplifyPath_Medium::Main();
//LintSolution1::SingleNumber_Easy::Main();
//LintSolution1::SingleNumberII_Medium::Main();
//LintSolution1::SlidingWindowMaximum_Hard::Main();
//LintSolution1::SortColors_Medium::Main();
//LintSolution1::SortList_Medium::Main();
//LintSolution1::Sqrt(x)_Easy::Main();
//LintSolution1::StringToInteger(atoi)_Hard::Main();
//LintSolution1::strStr_Easy::Main();
//LintSolution1::Subsets_Medium::Main();
//LintSolution1::SubsetsII_Medium::Main();
//LintSolution1::ThreeSum_Medium::Main();
//LintSolution1::TrailingZeros_Easy::Main();
//LintSolution1::TrappingRainWater_Medium::Main();
//LintSolution1::Triangle_Easy::Main();
//LintSolution1::TwoStringsAreAnagrams_Easy::Main();
//LintSolution1::TwoSum_Medium::Main();
//LintSolution1::UniqueBinarySearchTrees_Medium::Main();
//LintSolution1::UniqueBinarySearchTreesII_Medium::Main();
//LintSolution1::UniqueCharacters_Easy::Main();
//LintSolution1::UniquePaths_Easy::Main();
//LintSolution1::UniquePathsII_Easy::Main();
//LintSolution1::ValidateBinarySearchTree_Medium::Main();
//LintSolution1::ValidNumber_Hard::Main();
//LintSolution1::ValidPalindrome_Easy::Main();
//LintSolution1::ValidParentheses_Easy::Main();
//LintSolution1::ValidSudoku_Easy::Main();
//LintSolution1::WildcardMatching_Hard::Main();
//LintSolution1::WordBreak_Medium::Main();
//LintSolution1::WordLadder_Medium::Main();
//LintSolution1::WordLadderII_Hard::Main();
//LintSolution1::WordSearch_Medium::Main();
//LintSolution1::WordSearchII_Hard::Main();
